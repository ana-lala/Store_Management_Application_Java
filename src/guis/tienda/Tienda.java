/**
 *La clase Tienda representa la interfaz gráfica de una aplicación de tienda. Fue creada para gestionar las operaciones de compra, venta, almacenamiento,
 *y proporcionar ayuda al usuario. Además, gestiona la apertura de ventanas secundarias correspondientes a cada opción y permite
 *cambiar la configuración de la base de datos
 *@author Ana Laura Chenoweth Galaz
 */
package guis.tienda;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import guis.ventanas.*;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import utilities.Conexion;
import java.sql.PreparedStatement;

public class Tienda extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    private Conexion conexion;

    public Tienda() {
        // Constructor para tienda
        initComponents();
        this.setSize(700, 500);
        EscuchadorAccion esc01 = new EscuchadorAccion(this);
        this.addWindowListener(new EscuchadorVentana());
        jCompra.addActionListener(esc01);
        jVenta.addActionListener(esc01);
        jAlmacen.addActionListener(esc01);
        jAyuda.addActionListener(esc01);
        jReportes.addActionListener(esc01);
        this.setLocationRelativeTo(null);
    }

    public void Abrir(String ventana) {
        // metodo que abre otras ventanas
        switch (ventana) {
            case "Compra":
                VentanaCompra formCompra = new VentanaCompra(conexion);
                break;
            case "Venta":
                VentanaVenta formConsumidor = new VentanaVenta(conexion);
                break;
            case "Almacen":
                Almacen formAlmacen = new Almacen(this, conexion);
                getContentPane().add(formAlmacen);
                formAlmacen.setVisible(true);
                jPanel1.setVisible(false);
                jPanel3.setVisible(false);
                break;
            case "Ayuda":

                JOptionPane.showMessageDialog(this, "Braulio Alessandro Sanchez Bermudez \n"
                        + "Ana Laura Chenoweth Galaz \n" + "Jesus Ernesto Carrasco Teran", "Ayuda",
                        JOptionPane.INFORMATION_MESSAGE);
                break;

            case "Reportes":

                break;

            default:

                break;
        }

    }

    /**
     * muestr
     */
    public void mostrarPaneles() {

        jPanel1.setVisible(true);
        jPanel3.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        Usuario = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jVenta = new javax.swing.JButton();
        jCompra = new javax.swing.JButton();
        jAlmacen = new javax.swing.JButton();
        jReportes = new javax.swing.JButton();
        jAyuda = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu("Opciones");
        menuItem = new javax.swing.JMenuItem("Cambiar Base de Datos");
        conexion = new Conexion();
        
        setJMenuBar(menuBar);
        menu.add(menuItem);
        menuBar.add(menu);
        setTitle("Tienda");
        setSize(new java.awt.Dimension(400, 300));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel3.setBackground(new java.awt.Color(82, 78, 77));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Usuario.setForeground(new java.awt.Color(255, 255, 255));
        Usuario.setIcon(new javax.swing.ImageIcon("src/utilities/imagenes/usuario.png"));
        Usuario.setText("Usuario");
        Usuario.setPreferredSize(new java.awt.Dimension(154, 112));
        jPanel3.add(Usuario);

        getContentPane().add(jPanel3);
        agregarHilos();

        jPanel1.setBackground(new java.awt.Color(154, 143, 141));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(154, 143, 141));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setPreferredSize(new java.awt.Dimension(250, 220));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jVenta.setBackground(new java.awt.Color(0, 0, 153));
        jVenta.setForeground(new java.awt.Color(255, 255, 255));
        jVenta.setText("Venta");
        jVenta.setPreferredSize(new java.awt.Dimension(200, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jVenta, gridBagConstraints);

        jCompra.setBackground(new java.awt.Color(0, 0, 153));
        jCompra.setForeground(new java.awt.Color(255, 255, 255));
        jCompra.setText("Compra");
        jCompra.setPreferredSize(new java.awt.Dimension(200, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jCompra, gridBagConstraints);

        jAlmacen.setBackground(new java.awt.Color(0, 0, 153));
        jAlmacen.setForeground(new java.awt.Color(255, 255, 255));
        jAlmacen.setText("Almacen");
        jAlmacen.setPreferredSize(new java.awt.Dimension(200, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jAlmacen, gridBagConstraints);

        jReportes.setBackground(new java.awt.Color(0, 0, 153));
        jReportes.setForeground(new java.awt.Color(255, 255, 255));
        jReportes.setText("Reportes");
        jReportes.setPreferredSize(new java.awt.Dimension(200, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jReportes, gridBagConstraints);

        jAyuda.setBackground(new java.awt.Color(0, 0, 153));
        jAyuda.setForeground(new java.awt.Color(255, 255, 255));
        jAyuda.setText("Ayuda");
        jAyuda.setPreferredSize(new java.awt.Dimension(200, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jAyuda, gridBagConstraints);

        jPanel1.add(jPanel2, new java.awt.GridBagConstraints());

        // Agregar un ActionListener al elemento de menú
        menuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                abrirSubMenu();
            }
        });

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tienda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tienda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tienda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tienda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        try {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Tienda().setVisible(true);
                }
            });
        } catch (java.lang.Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel Usuario;
    private javax.swing.JButton jAlmacen;
    private javax.swing.JButton jAyuda;
    private javax.swing.JButton jCompra;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jReportes;
    private javax.swing.JButton jVenta;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menu;
    private JTextField urlTextfield = new JTextField();
    private JTextField userTextfield = new JTextField();
    private JTextField passTextfield = new JTextField();
    private VerificadorProductos verificador;
    // Crear el elemento de menú
    private javax.swing.JMenuItem menuItem;

    // End of variables declaration

    private void abrirSubMenu() {
        // Crear el JFrame
        JFrame frame = new JFrame("Cambiar BD");
        frame.setSize(300, 200);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);

        // Crear el panel y agregar JTextFields
        JPanel panel = new JPanel(new java.awt.GridLayout(4, 2));
        JButton btnAceptar = new JButton("Aceptar");

        panel.add(new JLabel("URL:"));
        panel.add(urlTextfield);
        panel.add(new JLabel("Username:"));
        panel.add(userTextfield);
        panel.add(new JLabel("Contraseña:"));
        panel.add(passTextfield);
        panel.add(btnAceptar);

        btnAceptar.addActionListener(new EscuchadorAccion(this));
        // Agregar el panel al JFrame
        frame.add(panel);

        // Hacer visible el JFrame
        frame.setVisible(true);
    }

    public void cambiarBaseDeDatos() {
        conexion.setURL(urlTextfield.getText());
        conexion.setUser(userTextfield.getText());
        conexion.setPass(passTextfield.getText());
    }

    public void agregarHilos() {
        Connection cn = null;
        try {
            cn = conexion.conectar();
            // Consulta SQL para obtener la cantidad actual de productos
            String consulta = "SELECT productos.id,productos.minimo FROM productos";
            PreparedStatement pst = cn.prepareStatement(consulta);
            ResultSet rs = pst.executeQuery();
            while (rs.next())
                new VerificadorProductos(conexion, rs.getInt("id"), rs.getInt("minimo"));
            cn.close();
            pst.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

class EscuchadorAccion implements ActionListener {

    public Tienda tienda;

    public EscuchadorAccion(Tienda tienda) {
        this.tienda = tienda;
    }

    public void actionPerformed(ActionEvent evento) {
        if (evento.getActionCommand().equals("Aceptar"))
            tienda.cambiarBaseDeDatos();
        else
            tienda.Abrir(evento.getActionCommand());

    }
}

class EscuchadorVentana implements WindowListener {

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowClosing(WindowEvent e) {
        System.exit(0);
    }

    @Override
    public void windowClosed(WindowEvent e) {
    }

    @Override
    public void windowIconified(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

}

class VerificadorProductos extends Thread {

    private static final int INTERVALO_VERIFICACION = 20000; // Intervalo en milisegundos
    private int cant_min; // Cantidad mínima requerida

    private Conexion Conexion;
    private int id;

    public VerificadorProductos(Conexion Conexion, int id, int cant_min) {
        this.Conexion = Conexion;
        this.id = id;
        this.cant_min = cant_min;
        this.start();
    }

    @Override
    public void run() {
        while(true){
            verificarCantidadProductos();
            try {
                // Pausar el hilo durante el intervalo de verificación
                Thread.sleep(INTERVALO_VERIFICACION);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void verificarCantidadProductos() {
        Connection cn = null;
        try {
            cn = Conexion.conectar();
            // Consulta SQL para obtener la cantidad actual de productos
            String consulta = "SELECT * FROM productos WHERE cantidad < ? AND id = " + id +"";

            try (PreparedStatement pst = cn.prepareStatement(consulta)) {
                pst.setInt(1, cant_min);

                try (ResultSet rs = pst.executeQuery()) {
                    while (rs.next()) {
                        int productosFaltantes = rs.getInt("cantidad");
                        int id = rs.getInt("id");
                        if (productosFaltantes >= 0) {
                            // Mostrar un JOptionPane indicando que faltan productos
                            JOptionPane.showMessageDialog(null,
                                    "¡Alerta! Hay productos con cantidad menor a " + cant_min + " del producto " + id,
                                    "Faltan productos", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            }
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
