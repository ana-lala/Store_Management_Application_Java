/**
 *La clase Almacen representa un panel de interfaz de usuario que muestra la información sobre los productos almacenados en una tienda. Permite visualizar la lista de
 *productos disponibles, así como agregar nuevos productos al panel.
 *@author Ana Laura Chenoweth Galaz
 */
package guis.tienda;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import utilities.Conexion;

public class Almacen extends javax.swing.JPanel {
 
      private Tienda tienda;
    private Conexion Conexion;
      private DefaultTableModel model = new DefaultTableModel();
      private javax.swing.JTextField obtenerProducto;
    public Almacen(Tienda tienda, Conexion Conexion) {
        this.Conexion = Conexion;
        initComponents();
        this.tienda = tienda;
        llenarTabla();
        jRegresar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Regresar(evt);
            }
        });
    }
    
    public void Regresar(ActionEvent evento)
    {
        setVisible(false); 
        tienda.mostrarPaneles();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	obtenerProducto = new javax.swing.JTextField();
        jRegresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        setBackground(new java.awt.Color(154, 143, 141));

        jRegresar.setBackground(new java.awt.Color(0, 0, 153));
        jRegresar.setForeground(new java.awt.Color(255, 255, 255));
        jRegresar.setText("Regresar");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Producto", "Cantidad", "Minimo", "Maximo", "Provedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Dinero:");

        jTextField1.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRegresar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRegresar)
                .addGap(27, 27, 27))
        );
    }// </editor-fold>                        

    private void llenarTabla() {

        try {
            calcularDinero();
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("select id, nombre, precio, cantidad, proveedor from productos");
            ResultSet rs = pst.executeQuery();
            jTable1 = new JTable(model);
            jTable1.setEnabled(false);
            jScrollPane1.setViewportView(jTable1);

            model.addColumn("Id");
            model.addColumn("Nombre");
            model.addColumn("Precio");
            model.addColumn("Cantidad");       
            model.addColumn("Proveedor");

            while (rs.next()) {
                Object[] fila = new Object[5];

                for (int i = 0; i < 5; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            cn.close();
            pst.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error " + e, "Error",
                            JOptionPane.ERROR_MESSAGE);
        }
    }

    private void calcularDinero(){
        try {
            // Establecer la conexión con la base de datos
            Connection conexion = Conexion.conectar();

            // Consulta SQL con la función de agregación SUM()
            String consulta = "SELECT SUM(Cantidad_de_Dinero) AS suma FROM dinero";

            // Preparar la consulta
            try (PreparedStatement pst = conexion.prepareStatement(consulta)) {
                // Ejecutar la consulta
                ResultSet rs = pst.executeQuery();

                // Verificar si hay resultados
                if (rs.next()) {
                    // Obtener la suma de la columna
                    double suma = rs.getDouble("suma");
                    jTextField1.setText("" + suma);
                }
            }

            // Cerrar la conexión
            conexion.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jRegresar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
